<html>
<head>
    <link rel="stylesheet" href="navbar.css">
    <link rel="stylesheet" href="LR_page.css">
    <style>
        /* Toast Notification Styles */
        .toast-container {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            width: 100%;
            display: flex;
            justify-content: center;
        }
        
        .toast {
            background: #28a745;
            color: white;
            padding: 20px 30px;
            border-radius: 10px;
            margin-bottom: 10px;
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);
            transform: translateY(-100px);
            transition: transform 0.4s ease;
            max-width: 500px;
            font-size: 16px;
            text-align: center;
            border: 2px solid rgba(255, 255, 255, 0.2);
        }
        
        .toast.show {
            transform: translateY(0);
        }
        
        .toast.success {
            background: #28a745;
        }
        
        .toast.error {
            background: #dc3545;
        }
        
        .toast-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .toast-title {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 8px;
        }
        
        .toast-close {
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            padding: 0;
            margin: 0;
        }
        
        .toast-message {
            margin: 0;
            font-size: 15px;
            line-height: 1.4;
        }
    </style>
</head>

<body>
    <!-- Toast Container -->
    <div class="toast-container" id="toastContainer"></div>

    <div class="homepage-container">
        <div class="login-container">
            <div class="login-input-container">
                <h1>Already registered?</h1>
                <form action="/login" method="POST">
                    <input type="email" class="username" name="email" placeholder="Email" required><br>
                    <input type="password" class="password" name="password" placeholder="Password" required>
                    <button type="submit" class="userlogon">Login</button>
                </form>
                <div class="forgot-password-link">
                    <a href="/forgot-password">Forgot Password?</a>
                </div>
                {{#if errors.password_mismatch}}
                    <b class="password-error">Passwords do not match.</b>
                {{/if}}
                {{#if errors.authentication_failed}}
                    <b class="credentials-error">Invalid username and/or password.</b>
                {{/if}}
                {{#if errors.registration_error}}
                    <b class="credentials-error">Registration failed. Please check your information.</b>
                {{/if}}
                {{#if errors.password_validation}}
                    <b class="credentials-error">Password validation failed: {{errors.password_validation_details}}</b>
                {{/if}}
                {{#if errors.invalid_data}}
                    <b class="credentials-error">Invalid data provided. Please check your input.</b>
                {{/if}}
                {{#if errors.account_locked}}
                    <b class="credentials-error">{{errors.account_locked_reason}}</b>
                {{/if}}
            </div>
        </div>

        <div class="register-container">
            <div class="register-header">New User? Join the talks...</div>
            <div class="register-input-container">
                <form action="/login" method="POST" id="registerForm">
                    <input type="text" class="registerinput" name="registerFirstName" placeholder="First Name" required><br>
                    <input type="text" class="registerinput" name="registerLastName" placeholder="Last Name" required><br>
                    <input type="email" class="registerinput" name="registerEmail" placeholder="Email" required><br>
                    <input type="password" class="registerinput" name="registerPassword" placeholder="Password" required id="passwordField"><br>
                    
                    <!-- Password Requirements Display -->
                    <div class="password-requirements" id="passwordRequirements">
                        <div id="initial-message" class="initial-message">
                            <span class="info-icon">ℹ</span> Longer passwords get bonus security points
                        </div>
                        <div id="requirements-list" style="display: none;">
                            <h4>Password Requirements:</h4>
                            <ul>
                                <li id="length-check">At least 12 characters long (recommended: 16+, strong: 20+)</li>
                                <li id="length-bonus" class="info">Longer passwords get bonus security points</li>
                                <li id="uppercase-check">At least one uppercase letter (A-Z)</li>
                                <li id="lowercase-check">At least one lowercase letter (a-z)</li>
                                <li id="number-check">At least one number (0-9)</li>
                                <li id="special-check">At least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)</li>
                                <li id="complexity-check">Meet at least 3 complexity criteria</li>
                                <li id="no-sequences">No sequential characters (123, abc, qwe, etc.)</li>
                                <li id="no-repeats">No more than 2 consecutive repeated characters</li>
                                <li id="no-patterns">No keyboard patterns (qwerty, asdfgh, etc.)</li>
                                <li id="no-common">Not a common password</li>
                            </ul>
                        </div>
                        <div id="success-message" class="success-indicator" style="display: none;">
                            <span class="check-icon">✓</span> Password is strong
                        </div>
                        <div class="password-strength-meter">
                            <div class="strength-label">Password Strength:</div>
                            <div class="strength-bar">
                                <div class="strength-fill" id="strengthFill"></div>
                            </div>
                            <div class="strength-text" id="strengthText">Enter a password</div>
                        </div>
                    </div>
                    
                    <input type="password" class="registerinput" name="confirmPassword" placeholder="Confirm Password" required><br>
                    
                    <select class="registerinput" name="userType" id="userType" required>
                        <option value="">Select User Type</option>
                        <option value="student">Student</option>
                        <option value="professor">Professor</option>
                        <option value="manager">Manager</option>
                    </select><br>
                    
                    <!-- Student fields -->
                    <div id="studentFields" style="display: none;">
                        <input type="text" class="registerinput" name="studentID" placeholder="Student ID"><br>
                        <select class="registerinput" name="course">
                            <option value="">Select a Course</option>
                            {{#if courses}}
                                {{#each courses}}
                                    <option value="{{_id}}">{{name}} ({{code}})</option>
                                {{/each}}
                            {{else}}
                                <option value="" disabled>No courses available</option>
                            {{/if}}
                        </select><br>
                    </div>
                    
                    <!-- Professor fields -->
                    <div id="professorFields" style="display: none;">
                        <input type="text" class="registerinput" name="teacherID" placeholder="Teacher ID"><br>
                        <div class="subject-selector">
                            <label for="subjects">Subjects (optional):</label><br>
                            <div class="subjects-checklist">
                                {{#each subjects}}
                                    <label class="subject-checkbox">
                                        <input type="checkbox" name="subjects" value="{{_id}}" data-name="{{name}}">
                                        <span class="checkmark"></span>
                                        {{name}} ({{code}})
                                    </label>
                                {{/each}}
                            </div>
                        </div>
                    </div>
                </form>
                
                <div class="register-button">
                    <button type="submit" form="registerForm" class="userregister">Register</button>
                </div>
            </div>
        </div>
    </div>

    <div id="navbar">
        <a class="mainpage" href="/">Profdex</a>
        <span class="navbar-buttons">
            <a class="menu" href="/editprofile">About Me</a>
            {{#unless (eq userType 'professor')}}
            <a class="menu" href="/createpost">Create Review</a>
            {{/unless}}
            <a class="menu" href="/help">Help</a>
        </span>
        <span class="search-buttons">
            {{#if (or (eq userType 'manager') (eq userType 'administrator'))}}
            <a class="moderator-link" href="/moderator">Moderator</a>
            {{/if}}
            <a class="admin-link" href="/admin/login">Admin</a>
            <form action="/viewprof" method="post">
                <input type="text" class="search" id="search" name="search" placeholder="Professor Full Name">
                <button type="submit" id="searchbutton"></button>
            </form>
        </span>
    </div>

    <script>
        let selectedSubjects = [];

        function checkFormValidity() {
            const userType = document.getElementById('userType').value;
            const registerButton = document.querySelector('.userregister');
            let isValid = true;
            let errorMessage = '';

            const firstName = document.querySelector('input[name="registerFirstName"]').value.trim();
            const lastName = document.querySelector('input[name="registerLastName"]').value.trim();
            const email = document.querySelector('input[name="registerEmail"]').value.trim();
            const password = document.querySelector('input[name="registerPassword"]').value;
            const confirmPassword = document.querySelector('input[name="confirmPassword"]').value;

            if (!firstName || !lastName || !email || !password || !confirmPassword || !userType) {
                isValid = false;
                errorMessage = 'Please fill all required fields';
            } else if (password !== confirmPassword) {
                isValid = false;
                errorMessage = 'Passwords do not match';
            } else {
                // Check password requirements
                const passwordChecks = validatePassword(password);
                const coreRequirements = ['length', 'uppercase', 'lowercase', 'number', 'special', 'complexity', 'sequences', 'repeats', 'patterns', 'common'];
                const allPasswordRequirementsMet = coreRequirements.every(req => passwordChecks[req] === true);
                
                if (!allPasswordRequirementsMet) {
                    isValid = false;
                    errorMessage = 'Password does not meet all requirements';
                } else {
                    // Additional validation based on user type
                    if (userType === 'student') {
                        const studentID = document.querySelector('input[name="studentID"]').value.trim();
                        const course = document.querySelector('select[name="course"]').value;
                        
                        if (!studentID || !course) {
                            isValid = false;
                            errorMessage = 'Please fill student ID and select a course';
                        }
                    } else if (userType === 'professor') {
                        const teacherID = document.querySelector('input[name="teacherID"]').value.trim();
                        
                        if (!teacherID) {
                            isValid = false;
                            errorMessage = 'Please fill teacher ID';
                        }
                    }
                }
            }

            if (isValid) {
                registerButton.classList.remove('disabled');
                registerButton.title = 'Click to register';
            } else {
                registerButton.classList.add('disabled');
                registerButton.title = errorMessage;
            }
            
            console.log('Form validity check:', { isValid, userType, errorMessage });

            return isValid;
        }

        function addFormValidationListeners() {
            const formFields = document.querySelectorAll('#registerForm input, #registerForm select');
            formFields.forEach(field => {
                field.addEventListener('input', checkFormValidity);
                field.addEventListener('change', checkFormValidity);
            });
            
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', checkFormValidity);
            });
        }

        document.getElementById('userType').addEventListener('change', function() {
            const userType = this.value;
            const studentFields = document.getElementById('studentFields');
            const professorFields = document.getElementById('professorFields');
            const courseSelect = document.querySelector('select[name="course"]');
            const teacherIDInput = document.querySelector('input[name="teacherID"]');
            const studentIDInput = document.querySelector('input[name="studentID"]');

            // Hide all fields first
            studentFields.style.display = 'none';
            professorFields.style.display = 'none';

            // Remove required attributes from all role-specific fields
            if (courseSelect) {
                courseSelect.required = false;
                courseSelect.removeAttribute('required');
            }
            if (teacherIDInput) {
                teacherIDInput.required = false;
                teacherIDInput.removeAttribute('required');
            }
            if (studentIDInput) {
                studentIDInput.required = false;
                studentIDInput.removeAttribute('required');
            }

            if (userType === 'student') {
                studentFields.style.display = 'block';
                if (courseSelect) {
                    courseSelect.required = true;
                    courseSelect.setAttribute('required', 'required');
                }
                if (studentIDInput) {
                    studentIDInput.required = true;
                    studentIDInput.setAttribute('required', 'required');
                }
            } else if (userType === 'professor') {
                professorFields.style.display = 'block';
                if (teacherIDInput) {
                    teacherIDInput.required = true;
                    teacherIDInput.setAttribute('required', 'required');
                }
            }

            setTimeout(checkFormValidity, 100);
        });



        document.getElementById('registerForm').addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent default form submission
            
            // Validate password requirements
            const password = document.querySelector('input[name="registerPassword"]').value;
            const passwordChecks = validatePassword(password);
            const coreRequirements = ['length', 'uppercase', 'lowercase', 'number', 'special', 'complexity', 'sequences', 'repeats', 'patterns', 'common'];
            const allPasswordRequirementsMet = coreRequirements.every(req => passwordChecks[req] === true);
            
            if (!allPasswordRequirementsMet) {
                alert('Password does not meet all requirements. Please check the password requirements above.');
                return;
            }
            
            // Check if passwords match
            const confirmPassword = document.querySelector('input[name="confirmPassword"]').value;
            if (password !== confirmPassword) {
                alert('Passwords do not match.');
                return;
            }
            
            // Check if all required fields are filled
            const userType = document.getElementById('userType').value;
            if (!userType) {
                alert('Please select a user type.');
                return;
            }
            
            // Additional validation based on user type
            if (userType === 'student') {
                const studentID = document.querySelector('input[name="studentID"]').value.trim();
                const course = document.querySelector('select[name="course"]').value;
                if (!studentID || !course) {
                    alert('Please fill student ID and select a course.');
                    return;
                }
            } else if (userType === 'professor') {
                const teacherID = document.querySelector('input[name="teacherID"]').value.trim();
                if (!teacherID) {
                    alert('Please fill teacher ID.');
                    return;
                }
            }
            
            // If all validation passes, submit the form using fetch
            console.log('Form validation passed, submitting...');
            
            // Collect form data
            const formData = new FormData(this);
            
            // Convert FormData to URLSearchParams for POST request
            const urlParams = new URLSearchParams();
            for (let [key, value] of formData.entries()) {
                urlParams.append(key, value);
            }
            
            console.log('Submitting form data:', Object.fromEntries(urlParams));
            
            // Submit the form data
            fetch('/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: urlParams
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response redirected:', response.redirected);
                
                if (response.redirected) {
                    // If the server redirects, follow the redirect
                    window.location.href = response.url;
                } else {
                    // If no redirect, reload the page to show any error messages
                    window.location.reload();
                }
            })
            .catch(error => {
                console.error('Error submitting form:', error);
                alert('An error occurred while submitting the form. Please try again.');
            });
        });

        // Function to check for sequential characters
        function checkSequentialCharacters(password) {
            // Check for numeric sequences (3+ consecutive digits)
            for (let i = 0; i <= password.length - 3; i++) {
                const seq = password.substr(i, 3);
                if (/^\d{3}$/.test(seq)) {
                    const num1 = parseInt(seq[0]);
                    const num2 = parseInt(seq[1]);
                    const num3 = parseInt(seq[2]);
                    
                    // Check if they form a sequence (ascending or descending)
                    if ((num2 === num1 + 1 && num3 === num2 + 1) || 
                        (num2 === num1 - 1 && num3 === num2 - 1)) {
                        return true; // Found sequential numbers
                    }
                }
            }
            
            // Check for alphabetic sequences (3+ consecutive letters)
            for (let i = 0; i <= password.length - 3; i++) {
                const seq = password.substr(i, 3);
                if (/^[a-zA-Z]{3}$/.test(seq)) {
                    const char1 = seq[0].toLowerCase().charCodeAt(0);
                    const char2 = seq[1].toLowerCase().charCodeAt(0);
                    const char3 = seq[2].toLowerCase().charCodeAt(0);
                    
                    // Check if they form a sequence (ascending or descending)
                    if ((char2 === char1 + 1 && char3 === char2 + 1) || 
                        (char2 === char1 - 1 && char3 === char2 - 1)) {
                        return true; // Found sequential letters
                    }
                }
            }
            
            // Check for common keyboard patterns
            const keyboardPatterns = [
                'qwe', 'wer', 'ert', 'rty', 'tyu', 'yui', 'uio', 'iop',
                'asd', 'sdf', 'dfg', 'fgh', 'ghj', 'hjk', 'jkl',
                'zxc', 'xcv', 'cvb', 'vbn', 'bnm',
                'qaz', 'wsx', 'edc', 'rfv', 'tgb', 'yhn', 'ujm', 'ikl'
            ];
            
            for (const pattern of keyboardPatterns) {
                if (password.toLowerCase().includes(pattern)) {
                    return true; // Found keyboard pattern
                }
            }
            
            return false; // No sequential characters found
        }

        // Enhanced password validation function with length-based scoring
        function validatePassword(password) {
            const minLength = 12;
            const recommendedLength = 16;
            const strongLength = 20;
            
            const checks = {
                length: password.length >= minLength,
                lengthRecommended: password.length >= recommendedLength,
                lengthStrong: password.length >= strongLength,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /\d/.test(password),
                special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password),
                sequences: !checkSequentialCharacters(password),
                repeats: !/(.)\1{2,}/.test(password), // No more than 2 consecutive repeated characters
                patterns: !/(qwerty|asdfgh|zxcvbn|123456|654321|qazwsx|edcrfv|tgbyhn|ujmikl|plokij)/i.test(password),
                common: !/^(password|123456|password123|admin|user|test|welcome|monkey|dragon|master|letmein|login|abc123|qwerty|football|baseball|superman|batman|trustno1|shadow|michael|jordan|harley|ranger|buster|thomas|tigger|robert|soccer|test123|guest|info|adm|mysql|user1|administrator)$/i.test(password)
            };
            
            // Calculate complexity score
            const complexityScore = [checks.uppercase, checks.lowercase, checks.number, checks.special].filter(Boolean).length;
            checks.complexity = complexityScore >= 3;
            
            // Calculate length-based bonus
            let lengthScore = 0;
            if (checks.length) {
                lengthScore = 1; // Base score for meeting minimum
                if (checks.lengthRecommended) lengthScore = 2;
                if (checks.lengthStrong) lengthScore = 3;
                
                // Bonus points for extra length
                if (password.length >= 16) {
                    const extraChars = password.length - 16;
                    lengthScore += extraChars * 0.1;
                }
            }
            
            checks.lengthScore = lengthScore;
            checks.totalScore = complexityScore + lengthScore;
            
            // Debug logging to see what's happening
            console.log('Password validation:', { password, checks, allValid: Object.values(checks).every(Boolean) });
            
            return checks;
        }
        
        // Update password requirements display with enhanced length feedback
        function updatePasswordRequirements(password) {
            const checks = validatePassword(password);
            
            const initialMessage = document.getElementById('initial-message');
            const requirementsList = document.getElementById('requirements-list');
            const successMessage = document.getElementById('success-message');
            
            // Check if all core password requirements are met (exclude scoring properties)
            const coreRequirements = ['length', 'uppercase', 'lowercase', 'number', 'special', 'complexity', 'sequences', 'repeats', 'patterns', 'common'];
            const allValid = coreRequirements.every(req => checks[req] === true);
            
            // Debug logging
            console.log('updatePasswordRequirements called with:', { 
                password, 
                passwordLength: password.length, 
                allValid, 
                coreRequirements: coreRequirements.map(req => ({ req, value: checks[req] })),
                checks 
            });
            
            if (password.length === 0) {
                // Initial state - show initial message
                initialMessage.style.display = 'block';
                requirementsList.style.display = 'none';
                successMessage.style.display = 'none';
            } else if (allValid) {
                // All requirements met - show success message
                initialMessage.style.display = 'none';
                requirementsList.style.display = 'none';
                successMessage.style.display = 'block';
            } else {
                // Some requirements not met - show only one error
                console.log('Showing requirements list with errors');
                initialMessage.style.display = 'none';
                requirementsList.style.display = 'block';
                successMessage.style.display = 'none';
                
                // Reset all to valid first
                document.getElementById('length-check').className = 'valid';
                document.getElementById('uppercase-check').className = 'valid';
                document.getElementById('lowercase-check').className = 'valid';
                document.getElementById('number-check').className = 'valid';
                document.getElementById('special-check').className = 'valid';
                document.getElementById('complexity-check').className = 'valid';
                document.getElementById('no-sequences').className = 'valid';
                document.getElementById('no-repeats').className = 'valid';
                document.getElementById('no-patterns').className = 'valid';
                document.getElementById('no-common').className = 'valid';
                
                // Priority order for showing errors (most important/common first)
                const errorPriority = [
                    { id: 'length-check', check: checks.length, message: 'Password is too short' },
                    { id: 'uppercase-check', check: checks.uppercase, message: 'Missing uppercase letter' },
                    { id: 'lowercase-check', check: checks.lowercase, message: 'Missing lowercase letter' },
                    { id: 'number-check', check: checks.number, message: 'Missing number' },
                    { id: 'special-check', check: checks.special, message: 'Missing special character' },
                    { id: 'complexity-check', check: checks.complexity, message: 'Insufficient complexity' },
                    { id: 'no-sequences', check: checks.sequences, message: 'Contains sequential characters' },
                    { id: 'no-repeats', check: checks.repeats, message: 'Too many repeated characters' },
                    { id: 'no-patterns', check: checks.patterns, message: 'Contains keyboard patterns' },
                    { id: 'no-common', check: checks.common, message: 'Too common password' }
                ];
                
                // Show only the first unmet requirement
                for (const error of errorPriority) {
                    if (!error.check) {
                        console.log('Setting error for:', error.id, error.message);
                        document.getElementById(error.id).className = 'invalid';
                        break; // Only show one error
                    }
                }
            }
            
            // Update strength meter
            updateStrengthMeter(checks);
            
            return allValid;
        }
        
        // Update password strength meter
        function updateStrengthMeter(checks) {
            const strengthFill = document.getElementById('strengthFill');
            const strengthText = document.getElementById('strengthText');
            
            if (!strengthFill || !strengthText) return;
            
            const totalScore = checks.totalScore || 0;
            const maxScore = 7; // 4 complexity + 3 length
            const percentage = Math.min((totalScore / maxScore) * 100, 100);
            
            strengthFill.style.width = percentage + '%';
            
            // Set color and text based on strength
            if (percentage >= 90) {
                strengthFill.className = 'strength-fill excellent';
                strengthText.textContent = 'Excellent';
            } else if (percentage >= 75) {
                strengthFill.className = 'strength-fill strong';
                strengthText.textContent = 'Strong';
            } else if (percentage >= 60) {
                strengthFill.className = 'strength-fill good';
                strengthText.textContent = 'Good';
            } else if (percentage >= 40) {
                strengthFill.className = 'strength-fill fair';
                strengthText.textContent = 'Fair';
            } else if (percentage >= 20) {
                strengthFill.className = 'strength-fill weak';
                strengthText.textContent = 'Weak';
            } else {
                strengthFill.className = 'strength-fill very-weak';
                strengthText.textContent = 'Very Weak';
            }
        }
        
        // Add password validation listener
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing form...');
            
            // Debug: Check if courses are available
            const courseSelect = document.querySelector('select[name="course"]');
            if (courseSelect) {
                console.log('Course select found, options:', courseSelect.options.length);
                for (let i = 0; i < courseSelect.options.length; i++) {
                    console.log(`Option ${i}:`, courseSelect.options[i].text, courseSelect.options[i].value);
                }
            }
            
            const passwordField = document.getElementById('passwordField');
            if (passwordField) {
                passwordField.addEventListener('input', function() {
                    const password = this.value;
                    const isValid = updatePasswordRequirements(password);
                    
                    // Update form validity to include password requirements
                    setTimeout(checkFormValidity, 100);
                });
            }
            
            addFormValidationListeners();
            checkFormValidity();
            
            // Check for password reset success and show toast
            {{#if success}}
                if ('{{success}}' === 'password_reset') {
                    showToast('Success!', 'Password reset successfully! You can now login with your new password.', 'success');
                }
            {{/if}}
        });
        
        // Toast notification functions
        function showToast(title, message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            toast.innerHTML = `
                <div class="toast-header">
                    <span class="toast-title">${title}</span>
                    <button class="toast-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
                </div>
                <p class="toast-message">${message}</p>
            `;
            
            toastContainer.appendChild(toast);
            
            // Show the toast with animation
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Auto-remove after 3 seconds
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        if (toast.parentElement) {
                            toast.remove();
                        }
                    }, 300);
                }
            }, 3000);
        }
    </script>

</body>
</html>