<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password - ProfDex</title>
    <link rel="stylesheet" href="navbar.css">
    <link rel="stylesheet" href="LR_page.css">
    <style>
        .change-password-container {
            max-width: 500px;
            margin: 50px auto;
            padding: 40px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        
        .change-password-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .change-password-header h1 {
            color: #333;
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .change-password-header p {
            color: #666;
            font-size: 16px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 600;
            font-size: 14px;
        }
        
        .form-group input {
            width: 100%;
            padding: 14px 18px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .submit-button {
            width: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 14px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin-top: 20px;
        }
        
        .submit-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }
        
        .alert {
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
            font-weight: normal;
        }
        
        .alert-error {
            background: #fee;
            color: #c33;
            border: 1px solid #fcc;
        }
        
        .alert-success {
            background: #efe;
            color: #3c3;
            border: 1px solid #cfc;
        }
        
        .back-link {
            text-align: center;
            margin-top: 20px;
        }
        
        .back-link a {
            color: #667eea;
            text-decoration: none;
            font-size: 14px;
            transition: color 0.3s;
        }
        
        .back-link a:hover {
            color: #764ba2;
            text-decoration: underline;
        }
        
        /* Password Requirements Styling */
        .password-requirements {
            background: #f8f9fa;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            font-size: 13px;
            max-width: 100%;
        }
        
        .password-requirements h4 {
            color: #333;
            margin-bottom: 10px;
            font-size: 14px;
            font-weight: 600;
        }
        
        .password-requirements ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .password-requirements li {
            padding: 4px 0;
            margin: 2px 0;
            position: relative;
            padding-left: 20px;
            transition: all 0.3s ease;
        }
        
        .password-requirements li::before {
            content: '✗';
            position: absolute;
            left: 0;
            color: #dc3545;
            font-weight: bold;
            font-size: 12px;
        }
        
        .password-requirements li.valid::before {
            content: '✓';
            color: #28a745;
        }
        
        .password-requirements li.valid {
            color: #28a745;
            font-weight: 500;
        }
        
        .password-requirements li.invalid {
            color: #6c757d;
        }
        
        .password-requirements li.history-error {
            color: #dc3545;
            font-weight: 500;
        }
        
        .password-requirements li.history-error::before {
            content: '⚠';
            color: #dc3545;
        }
    </style>
</head>
<body>
    <div id="navbar">
        <a class="mainpage" href="/">Profdex</a>
        <span class="navbar-buttons">
            <a class="menu" href="/editprofile">About Me</a>
            {{#unless (eq userType 'professor')}}
            <a class="menu" href="/createpost">Create Review</a>
            {{/unless}}
            <a class="menu" href="/help">Help</a>
        </span>
        <span class="search-buttons">
            {{#if loggedInUser}}
                <a class="login-button" href="/logout">Logout</a>
            {{else}}
                <a class="login-button" href="/login">Login</a>
            {{/if}}
            {{#if (or (eq userType 'manager') (eq userType 'administrator'))}}
            <a class="moderator-link" href="/moderator">Moderator</a>
            {{/if}}
            {{#if (eq userType 'administrator')}}
            <a class="admin-link" href="/admin">Admin</a>
            {{/if}}
            <form action="/viewprof" method="post">
                <input type="text" class="search" id="search" name="search" placeholder="Professor Full Name">
                <button type="submit" id="searchbutton"></button>
            </form>
        </span>
    </div>

    <div class="change-password-container">
        <div class="change-password-header">
            <h1>Change Password</h1>
            <p>You have been re-authenticated. Enter your new password below</p>
        </div>

        {{#if errors.validation_error}}
            <div class="alert alert-error">
                Please fill all required fields with valid information.
            </div>
        {{/if}}

        {{#if errors.password_history_error}}
            <div class="alert alert-error">
                This password has been used recently. Please choose a different password.
            </div>
        {{/if}}
        {{#if errors.password_validation_error}}
            <div class="alert alert-error">
                Password validation failed: {{errors.password_validation_details}}
            </div>
        {{/if}}
        {{#if errors.password_age_error}}
            <div class="alert alert-error">
                {{errors.password_age_message}}
            </div>
        {{/if}}
        {{#if errors.success}}
            <div class="alert alert-success">
                Password changed successfully!
            </div>
        {{/if}}

        <form action="/change-password" method="POST" id="changePasswordForm">
            <div class="form-group">
                <label for="newPassword">New Password</label>
                <input type="password" id="newPassword" name="newPassword" required>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm New Password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" required>
            </div>

            <!-- Password Requirements Display -->
            <div class="password-requirements" id="passwordRequirements" style="display: none;">
                <h4>Password Requirements:</h4>
                <ul>
                    <li id="length-check">At least 12 characters long (recommended: 16+, strong: 20+)</li>
                    <li id="uppercase-check">At least one uppercase letter (A-Z)</li>
                    <li id="lowercase-check">At least one lowercase letter (a-z)</li>
                    <li id="number-check">At least one number (0-9)</li>
                    <li id="special-check">At least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)</li>
                    <li id="complexity-check">Meet at least 3 complexity criteria</li>
                    <li id="no-sequences">No sequential characters (123, abc, qwe, etc.)</li>
                    <li id="no-repeats">No more than 2 consecutive repeated characters</li>
                    <li id="no-patterns">No keyboard patterns (qwerty, asdfgh, etc.)</li>
                    <li id="no-common">Not a common password</li>
                    <li id="history-check">Not recently used</li>
                </ul>
            </div>

            <button type="submit" class="submit-button">Change Password</button>
        </form>

        <div class="back-link">
            <a href="/editprofile">← Back to Edit Profile</a>
        </div>
    </div>

    <script>
        // Function to check for sequential characters
        function checkSequentialCharacters(password) {
            // Check for numeric sequences (3+ consecutive digits)
            for (let i = 0; i <= password.length - 3; i++) {
                const seq = password.substr(i, 3);
                if (/^\d{3}$/.test(seq)) {
                    const num1 = parseInt(seq[0]);
                    const num2 = parseInt(seq[1]);
                    const num3 = parseInt(seq[2]);
                    
                    if ((num2 === num1 + 1 && num3 === num2 + 1) || 
                        (num2 === num1 - 1 && num3 === num2 - 1)) {
                        return true;
                    }
                }
            }
            
            // Check for alphabetic sequences (3+ consecutive letters)
            for (let i = 0; i <= password.length - 3; i++) {
                const seq = password.substr(i, 3);
                if (/^[a-zA-Z]{3}$/.test(seq)) {
                    const char1 = seq[0].toLowerCase().charCodeAt(0);
                    const char2 = seq[1].toLowerCase().charCodeAt(0);
                    const char3 = seq[2].toLowerCase().charCodeAt(0);
                    
                    if ((char2 === char1 + 1 && char3 === char2 + 1) || 
                        (char2 === char1 - 1 && char3 === char2 - 1)) {
                        return true;
                    }
                }
            }
            
            // Check for common keyboard patterns
            const keyboardPatterns = [
                'qwe', 'wer', 'ert', 'rty', 'tyu', 'yui', 'uio', 'iop',
                'asd', 'sdf', 'dfg', 'fgh', 'ghj', 'hjk', 'jkl',
                'zxc', 'xcv', 'cvb', 'vbn', 'bnm',
                'qaz', 'wsx', 'edc', 'rfv', 'tgb', 'yhn', 'ujm', 'ikl'
            ];
            
            for (const pattern of keyboardPatterns) {
                if (password.toLowerCase().includes(pattern)) {
                    return true;
                }
            }
            
            return false;
        }

        // Enhanced password validation function
        function validatePassword(password) {
            const minLength = 12;
            const recommendedLength = 16;
            const strongLength = 20;
            
            const checks = {
                length: password.length >= minLength,
                lengthRecommended: password.length >= recommendedLength,
                lengthStrong: password.length >= strongLength,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /\d/.test(password),
                special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password),
                sequences: !checkSequentialCharacters(password),
                repeats: !/(.)\1{2,}/.test(password),
                patterns: !/(qwerty|asdfgh|zxcvbn|123456|654321|qazwsx|edcrfv|tgbyhn|ujmikl|plokij)/i.test(password),
                common: !/^(password|123456|password123|admin|user|test|welcome|monkey|dragon|master|letmein|login|abc123|qwerty|football|baseball|superman|batman|trustno1|shadow|michael|jordan|harley|ranger|buster|thomas|tigger|robert|soccer|test123|guest|info|adm|mysql|user1|administrator)$/i.test(password)
            };
            
            // Calculate complexity score
            const complexityScore = [checks.uppercase, checks.lowercase, checks.number, checks.special].filter(Boolean).length;
            checks.complexity = complexityScore >= 3;
            
            return checks;
        }
        
        // Update password requirements display
        function updatePasswordRequirements(password) {
            const checks = validatePassword(password);
            
            const requirementsList = document.getElementById('passwordRequirements');
            
            if (password.length === 0) {
                requirementsList.style.display = 'none';
                return;
            }
            
            requirementsList.style.display = 'block';
            
            // Reset all to valid first
            document.getElementById('length-check').className = 'valid';
            document.getElementById('uppercase-check').className = 'valid';
            document.getElementById('lowercase-check').className = 'valid';
            document.getElementById('number-check').className = 'valid';
            document.getElementById('special-check').className = 'valid';
            document.getElementById('complexity-check').className = 'valid';
            document.getElementById('no-sequences').className = 'valid';
            document.getElementById('no-repeats').className = 'valid';
            document.getElementById('no-patterns').className = 'valid';
            document.getElementById('no-common').className = 'valid';
            document.getElementById('history-check').className = 'valid';
            
            // Priority order for showing errors
            const errorPriority = [
                { id: 'length-check', check: checks.length, message: 'Password is too short' },
                { id: 'uppercase-check', check: checks.uppercase, message: 'Missing uppercase letter' },
                { id: 'lowercase-check', check: checks.lowercase, message: 'Missing lowercase letter' },
                { id: 'number-check', check: checks.number, message: 'Missing number' },
                { id: 'special-check', check: checks.special, message: 'Missing special character' },
                { id: 'complexity-check', check: checks.complexity, message: 'Insufficient complexity' },
                { id: 'no-sequences', check: checks.sequences, message: 'Contains sequential characters' },
                { id: 'no-repeats', check: checks.repeats, message: 'Too many repeated characters' },
                { id: 'no-patterns', check: checks.patterns, message: 'Contains keyboard patterns' },
                { id: 'no-common', check: checks.common, message: 'Too common password' }
            ];
            
            // Show only the first unmet requirement
            for (const error of errorPriority) {
                if (!error.check) {
                    document.getElementById(error.id).className = 'invalid';
                    break;
                }
            }
        }

        // Add password validation listener
        document.addEventListener('DOMContentLoaded', function() {
            const newPasswordField = document.getElementById('newPassword');
            if (newPasswordField) {
                newPasswordField.addEventListener('input', function() {
                    const password = this.value;
                    updatePasswordRequirements(password);
                });
            }
            
            // Form validation
            const form = document.getElementById('changePasswordForm');
            form.addEventListener('submit', function(e) {
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                
                if (!currentPassword || !newPassword || !confirmPassword) {
                    e.preventDefault();
                    alert('Please fill all required fields.');
                    return;
                }
                
                if (newPassword !== confirmPassword) {
                    e.preventDefault();
                    alert('New passwords do not match.');
                    return;
                }
                
                // Check password requirements
                const passwordChecks = validatePassword(newPassword);
                const coreRequirements = ['length', 'uppercase', 'lowercase', 'number', 'special', 'complexity', 'sequences', 'repeats', 'patterns', 'common'];
                const allPasswordRequirementsMet = coreRequirements.every(req => passwordChecks[req] === true);
                
                if (!allPasswordRequirementsMet) {
                    e.preventDefault();
                    alert('Password does not meet all requirements. Please check the password requirements above.');
                    return;
                }
            });
        });
    </script>
</body>
</html>
